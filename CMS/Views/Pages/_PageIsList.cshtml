@model List<Data.Models.PageModel>
@using Newtonsoft.Json;
@{
    WebGrid grid = new WebGrid(rowsPerPage: ViewBag.rowsPerPage, ajaxUpdateContainerId: "WebGrid", canSort: false);
    grid.Bind(Model, autoSortAndPage: false, rowCount: ViewBag.rowCount);
    @grid.GetHtml(tableStyle: "table table-striped table-expandable", footerStyle: "table-pager",
mode: WebGridPagerModes.All,
firstText: "<< First",
previousText: "< Prev",
nextText: "Next >",
lastText: "Last >>",
columns: grid.Columns(
            grid.Column(header: "", format: (item) => item.ChildCount > 0 ? new HtmlString(
                    "<a  title='Expand' class='modalLink btn btn-sm' onclick='getIsListChildren(this," + item.Id + ")' href='javascript:;'><i class='fas fa-angle-right ' aria-hidden='true'></i></a>"
            ) : new HtmlString("")) ,
            grid.Column(header: "Id", format: (item) => new HtmlString(
                "<div class='listContextMenu'>"
                + "<span>" + item.Id + "</span>"
        + "<a  class='nav-link listMenuA' title='Right click to view " + item.Name + " page actions' data-tooltip='#tooltip_content" + item.Id + "' id='apage" + item.Id + "' data-tree='#apage" + item.ParentId + "'  data-contextmenu "
        + " data-id='" + item.Id + "'"
        + " data-isList='" + (item.isList ? 1 : 0) + "'"
        + " data-isFolder='" + (item.ChildCount > 0 ? 1 : 0) + "'"
        + " data-isHidden='" + (item.IsHidden ? 1 : 0) + "'"
        + " data-tpid='" + item.PageTemplateID + "'"
        + " data-friendlyurl='" + item.FriendlyUrl + "' "
        + " data-editlink='" + Url.Content("~/Pages/Index/") + item.Id + "' "
        + " data-editcontenttypelink='" + Url.Content("~/Pages/_EditContentType/") + item.Id + "' "
        + " data-addlink='" + Url.Content("~/Pages/SelectTemplate/") + item.Id + "'"
        + " data-hideunhideurl='" + Url.Content("~/Pages/_HideUnhide/") + item.Id + "'"
        + " data-photogalleryurl='" + Url.Content("~/PagesGallery/Index/") + item.Id + "'"
        + " data-moveupurl='" + Url.Content("~/Pages/MoveUp/") + item.Id + "' "
        + " data-movedownurl='" + Url.Content("~/Pages/MoveDown/") + item.Id + "' "
        + "> &nbsp;</a>"
        + "</div>"
)),
            grid.Column(columnName: "Name", header: "Name"),
            grid.Column(header: "Hidden", format: (item) => item.IsHidden ? new HtmlString("<span class='badge bg-danger'>true</span>") : new HtmlString("<span class='badge bg-success'>false</span>"))


        ));
}

<script type="text/javascript">
    $(document).ready(function () {
        drawlistMenuA();
    })
    async function getIsListChildren(sender, parentId) {
        try {
            var $this = $(sender)
            var angle = $this.children(":first");
            // not expanded
            if (angle.hasClass("fa-angle-right")) {
                const responce = await this.getIsListChildFromDB(parentId)
                if (responce && responce.data) {
                    $(sender).closest("tr").after("<tr><td></td><td colspan = '999'>" + responce.data + "</td></tr>");
                    angle.removeClass("fa-angle-right");
                    angle.addClass("fa-angle-down");                   
                    drawlistMenuA();

                }
            }
            else { // expanded
                $this.closest("tr").next().remove();
                angle.addClass("fa-angle-right")
            }
        }
        catch (ex) {
            console.log(ex)
        }

    }
    async function getIsListChildFromDB(parentId) {
        var url = "@Url.Content("~/Pages/_getPageChidlrenInList")?parentId=" + parentId;
        return new Promise((resolve, reject) => {
            $.ajax({
                type: "GET",
                url: url,
                data: {},
                dataType: "json",
                success: function (d) {
                    resolve(d)
                },
                error(xhr) {
                    console.log(xhr);
                    reject(xhr);
                }
            });
        })
    }
    function drawlistMenuA() {
        $(".listMenuA").each(function () {
            var html = "";
            var isList = $(this).attr("data-isList")==1
            var isFolder = $(this).attr("data-isFolder") == 1
            var ishidden = $(this).attr("data-isHidden") == 1  ? "red" : "green";
            if (isList) {
                html += "<i class='nav-icon far fas fa-table " + ishidden + "'></i>"
            }
            else {
                html += isFolder ? "<i class='nav-icon far fas fa-folder " + ishidden + "'></i>" : "<i class='nav-icon far fas fa-file " + ishidden + "'></i>";
            }

            $(this).html(html)

        })

        BindContextMenu();
    }
</script>